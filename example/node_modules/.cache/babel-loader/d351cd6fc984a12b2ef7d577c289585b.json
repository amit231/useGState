{"ast":null,"code":"import React, { useContext, useState, useCallback, useEffect } from 'react';\nconst StoreContext = React.createContext({});\nconst store = {\n  current: {}\n};\nconst GStateContextProvider = StoreContext.Provider;\nconst useGState = gState => {\n  const {\n    get,\n    set,\n    subscribe,\n    unsubscribe\n  } = useContext(StoreContext);\n  const [state, setState] = useState(gState.value);\n  const setter = useCallback(val => {\n    set === null || set === void 0 ? void 0 : set(gState.key, val);\n  }, []);\n  useEffect(() => {\n    const subscriber = () => {\n      const updatedState = get === null || get === void 0 ? void 0 : get(gState.key);\n      setState(() => updatedState);\n    };\n    subscribe === null || subscribe === void 0 ? void 0 : subscribe(subscriber);\n    return () => {\n      unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe(subscriber);\n    };\n  }, []);\n  return [state, setter];\n};\nlet gStateCnt = 0;\nconst gState = value => {\n  const key = `gState#${++gStateCnt}`;\n  store.current[key] = value;\n  return {\n    key,\n    value\n  };\n};\nconst premetiveTypes = ['number', 'string', 'bigInt', 'boolean'];\nconst GStateProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const get = React.useCallback(a => {\n    return store.current[a];\n  }, []);\n  const set = React.useCallback((a, val) => {\n    if (premetiveTypes.includes(typeof val)) {\n      store.current[a] = val;\n    } else {\n      store.current[a] = {\n        ...store.current[a],\n        ...val\n      };\n    }\n    subs.current.forEach(sub => sub());\n  }, []);\n  const subs = React.useRef(new Set());\n  const subscribe = React.useCallback(fn => {\n    subs.current.add(fn);\n  }, []);\n  const unsubscribe = React.useCallback(fn => {\n    subs.current.delete(fn);\n  }, []);\n  return React.createElement(GStateContextProvider, {\n    value: {\n      get,\n      set,\n      subscribe,\n      unsubscribe\n    }\n  }, children);\n};\nexport default useGState;\nexport { GStateProvider, gState };","map":{"version":3,"sources":["../src/index.tsx"],"names":["StoreContext","React","createContext","store","current","GStateContextProvider","Provider","useGState","gState","get","set","subscribe","unsubscribe","useContext","state","setState","useState","value","setter","useCallback","val","key","useEffect","subscriber","updatedState","gStateCnt","premetiveTypes","GStateProvider","children","a","includes","subs","forEach","sub","useRef","Set","fn","add","delete"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useState\n} from 'react'\n\n\nconst StoreContext = React.createContext<\n  Partial<{\n    get: (a: string) => any\n    set: (a: string, v: object) => void\n    subscribe: (fn: () => void) => void\n    unsubscribe: (fn: () => void) => void\n  }>\n>({})\n\n\nconst store = {\n  current:{}\n};\nconst GStateContextProvider = StoreContext.Provider\ninterface IgState {\n  key: string\n  value: any\n}\n\nconst useGState = (gState: IgState) => {\n  const { get, set, subscribe, unsubscribe } = useContext(StoreContext)\n  const [state, setState] = useState(gState.value)\n\n  const setter = useCallback((val) => {\n    set?.(gState.key, val)\n  }, [])\n  useEffect(() => {\n    const subscriber = () => {\n      const updatedState = get?.(gState.key)\n      setState(()=>updatedState)\n    }\n    subscribe?.(subscriber)\n    return () => {\n      unsubscribe?.(subscriber)\n    }\n  }, [])\n\n  return [state, setter]\n}\n\nlet gStateCnt = 0\nconst gState = (value: any): IgState => {\n  const key = `gState#${++gStateCnt}`\n  store.current[key] = value;\n  return { key, value }\n}\nexport default useGState;\nconst premetiveTypes = ['number','string','bigInt','boolean']\nconst GStateProvider = ({ children }: { children: JSX.Element }) => {\n  const get = React.useCallback((a: string) => {\n    return store.current[a]\n  }, [])\n  const set = React.useCallback((a: string, val: any) => {\n    if(premetiveTypes.includes(typeof val)){\n      store.current[a] = val;\n    } else{\n      store.current[a] = { ...store.current[a], ...val }\n    }\n    subs.current.forEach(sub=>sub());\n  }, [])\n  const subs = React.useRef(new Set<() => void>())\n  const subscribe = React.useCallback((fn: () => void) => {\n    subs.current.add(fn)\n  }, [])\n  const unsubscribe = React.useCallback((fn: () => void) => {\n    subs.current.delete(fn)\n  }, [])\n  return (\n    <GStateContextProvider value={{ get, set, subscribe, unsubscribe }}>\n      {children}\n    </GStateContextProvider>\n  )\n}\n\nexport {GStateProvider,gState};\n"]},"metadata":{},"sourceType":"module"}